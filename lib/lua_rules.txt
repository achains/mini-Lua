(* Basic types *)
(* nil, boolean, number, string, function, -userdata-, -thread-, and table *)
(* Tables can be heterogeneous; that is, they can contain values of all types (except nil). Any key with value nil is not considered part of the table. Conversely, any key that is not part of a table has an associated value nil. *)
(* any float with integral value used as a key is converted to its respective integer. *)
(* On the other hand, 2 and "2" are different Lua values *)
(* table["Name"] equals table.Name *)

(* a = b + c(print or io.write)("done")  OR
   a = b + c; (print or io.write)("done") both correct, but second is preferable *)

x, y, z = y, z, x -- Multi-assignment

Control structures:
while exp do block end
repeat bloc until exp
if exp then block {elseif exp then block} [else block] end

False and Nil considered false
!!! Everything else is True !!! (Even the number 0)

The break statement terminates the execution of a while, repeat and for loop

!! Functions can return more than one value !! 
!! The return statement can only be written as last statement of a block. !!
!! If it is really necessary to return in the middle of a block, then an explicit inner block can be used, as in the idiom do return end, because now return is the last statement in its (inner) block. !!

for Name '=' exp ',' exp [',' exp] do block end -- FOR loop 

for v = e1, e2, e3 do block end
all expresions in for statement must result a number

The generic for loop has the following syntax:

	stat ::= for namelist in explist do block end
	namelist ::= Name {‘,’ Name}

Local variables can be declared anywhere inside a block. The declaration can include an initial assignment:

	stat ::= local namelist [‘=’ explist]

Lua arithmetic operations are +, -, *, / (float division), // (floor division), %, ^(exponentiation), -(unary minus)

COERCIONS AND CONVERSIONS
{
    Exponentiation and float division always convert integer operands to floats.
    All other arithmetic operations applied to mixed numbers (integers and floats) convert the integer operand to a float; this is called the usual rule.
    Lua also converts strings to numbers, whenever a number is expected
}

Relational operators are ==, ~= (neq), <, >, <=, >=
Logical operators are and, or, not 

{The conjunction operator 
And returns its first argument if this value is false or nil; otherwise, and returns its second argument}

{The disjunction operator 
Or returns its first argument if this value is different from nil and false; otherwise, or returns its second argument.}

..  -- string concatenation operator

#Var -- length operator 

Table constructor
{
    Each field of the form [exp1] = exp2 adds to the new table an entry with key exp1 and value exp2. A field of the form name = exp is equivalent to ["name"] = exp.
    Finally, fields of the form exp are equivalent to [i] = exp, where i are consecutive integers starting with 1.
    Fields in the other formats do not affect this counting. 
    For example, a = { [f(1)] = g; "x", "y"; x = 1, f(x), [30] = 23; 45 }
}

Sample table
{
    a = {5; 3; 3; 2; 1}
    for k, v in pairs(a) do
        print(k, v)
    end

    a.Meow = 5

    print(a[0])
    print(a.Meow)
}
Sample table output
{
    1	5
    2	3
    3	3
    4	2
    5	1
    nil
    5
}